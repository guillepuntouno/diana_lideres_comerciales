version: 1
frontend:
  phases:
    preBuild:
      commands:
        - echo "=== Configurando entorno de Flutter ==="
        # Crear script de verificación si no existe
        - |
          if [ ! -f "scripts/verify_env.sh" ]; then
            mkdir -p scripts
            echo '#!/bin/bash' > scripts/verify_env.sh
            echo 'echo "Verificación básica del entorno"' >> scripts/verify_env.sh
            chmod +x scripts/verify_env.sh
          fi
        # Configurar variables de entorno usando directorio home (siempre tiene permisos)
        - export FLUTTER_HOME=$HOME/flutter
        - export PATH="$PATH:$FLUTTER_HOME/bin"
        - export PUB_CACHE=$HOME/.pub-cache
        - export FLUTTER_WEB=true
        # Crear directorios necesarios en home directory
        - mkdir -p $PUB_CACHE
        - mkdir -p $FLUTTER_HOME
        # Instalar Flutter en directorio home
        - |
          if ! command -v flutter &> /dev/null; then
            echo "Instalando Flutter SDK en $FLUTTER_HOME..."
            cd $HOME
            wget -q https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.19.6-stable.tar.xz
            tar xf flutter_linux_3.19.6-stable.tar.xz
            rm flutter_linux_3.19.6-stable.tar.xz
            chmod -R 755 $HOME/flutter
          else
            echo "Flutter ya está disponible, usando versión existente"
          fi
        # Verificar instalación de Flutter
        - flutter --version
        - flutter doctor --android-licenses || echo "Continuando sin licencias de Android..."
        - flutter config --enable-web
        - echo "=== Configurando dependencias del proyecto ==="
        # Limpiar solo si es necesario
        - flutter clean
        # Instalar dependencias
        - flutter pub get
        # Ejecutar build_runner para generar código de Hive
        - echo "Generando adaptadores de Hive..."
        - dart run build_runner build --delete-conflicting-outputs --verbose || echo "Error en build_runner, continuando..."
        - echo "Verificando archivos generados por Hive:"
        - find . -name "*.g.dart" | head -10 || echo "No se encontraron archivos .g.dart"
    build:
      commands:
        - export FLUTTER_HOME=$HOME/flutter
        - export PATH="$PATH:$FLUTTER_HOME/bin"
        - export PUB_CACHE=$HOME/.pub-cache
        - export FLUTTER_WEB=true
        - echo "=== Iniciando build de la aplicación web ==="
        # Verificar que Flutter esté disponible
        - flutter --version
        # Build para web con configuraciones optimizadas para Amplify
        - flutter build web --release --web-renderer html --dart-define=FLUTTER_WEB_USE_SKIA=false --dart-define=FLUTTER_WEB_AUTO_DETECT=false
        - echo "=== Verificando archivos generados ==="
        - ls -la build/web/
        - echo "Archivos principales:"
        - ls -la build/web/index.html build/web/main.dart.js build/web/flutter.js || echo "Algunos archivos pueden no estar presentes"
    postBuild:
      commands:
        - echo "=== Build completado exitosamente ==="
        - echo "Archivos en build/web:"
        - find build/web -type f | head -20
        - echo "Tamaño del directorio build/web:"
        - du -sh build/web/
        - echo "=== Verificando archivos críticos ==="
        - test -f build/web/index.html && echo "✓ index.html encontrado" || echo "✗ index.html NO encontrado"
        - test -f build/web/main.dart.js && echo "✓ main.dart.js encontrado" || echo "✗ main.dart.js NO encontrado"
        - test -f build/web/flutter.js && echo "✓ flutter.js encontrado" || echo "✗ flutter.js NO encontrado"
  artifacts:
    baseDirectory: build/web
    files:
      - '**/*'
  cache:
    paths:
      - $HOME/flutter/**/*
      - $HOME/.pub-cache/**/*
      - .dart_tool/**/*
      - build/**/*
